name: Build macOS (.app + .dmg) with auto FFmpeg (stable)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  mac-arm64:
    name: macOS Apple Silicon (arm64)
    runs-on: macos-14
    env:
      APP_NAME: "VideoCutter"  # đặt tên app ở đây
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # In ra danh sách .py (không dùng -maxdepth để tránh lỗi BSD find)
      - name: Show repo tree (debug)
        shell: bash
        run: |
          echo "== ROOT =="
          ls -la
          echo "== PY FILES FOUND (first 300) =="
          find . -type f -name "*.py" | sort | sed -n '1,300p'

      # Dò ENTRY_SCRIPT bằng Python (ưu tiên ENTRY_SCRIPT.txt)
      - name: Detect ENTRY_SCRIPT (Python)
        id: detect
        shell: bash
        run: |
          ENTRY=$(python - <<'PY'
import os, re, sys
# 1) Ưu tiên ENTRY_SCRIPT.txt
if os.path.isfile('ENTRY_SCRIPT.txt'):
    p=open('ENTRY_SCRIPT.txt','r',encoding='utf-8').read().strip()
    if os.path.isfile(p):
        print(p); sys.exit(0)
    else:
        print(f'__ERR__ ENTRY_SCRIPT.txt trỏ tới file không tồn tại: {p}')
        sys.exit(2)

# 2) Quét tất cả .py (giới hạn 6 cấp theo logic)
cands=[]
for root,dirs,files in os.walk('.', topdown=True):
    depth=root.count(os.sep)-1
    if depth>=6: continue
    for f in files:
        if f.endswith('.py'): cands.append(os.path.join(root,f))
if not cands:
    print('__ERR__ Không thấy file .py'); sys.exit(1)

# 3) Heuristic: có PySide6/QApplication và __main__
pref=None
for p in cands:
    try:
        t=open(p,'r',encoding='utf-8',errors='ignore').read()
    except Exception:
        continue
    if (('PySide6' in t or 'QApplication' in t) and '__main__' in t):
        pref=p; break

# 4) fallback theo tên quen thuộc
if pref is None:
    for tryname in ['app.py','video_cutter_gui.py','src/app.py','src/video_cutter_gui.py']:
        if os.path.isfile(tryname):
            pref=tryname; break

# 5) fallback cuối: lấy file .py đầu tiên
if pref is None:
    pref=cands[0]

print(pref)
PY
)
          echo "ENTRY raw: $ENTRY"
          if [[ "$ENTRY" == __ERR__* ]]; then
            echo "::error::$ENTRY"; exit 1
          fi
          echo "ENTRY_SCRIPT=$ENTRY" >> "$GITHUB_ENV"
          echo "Using ENTRY_SCRIPT=$ENTRY"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Node (download ffmpeg/ffprobe static)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6 || true
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Fetch FFmpeg + FFprobe static (darwin/arm64)
        shell: bash
        run: |
          npm i --silent ffmpeg-static@latest ffprobe-static@latest
          FFMPEG_PATH=$(node -e "process.stdout.write(require('ffmpeg-static')||'')")
          FFPROBE_PATH=$(node -e "process.stdout.write((require('ffprobe-static').path)||'')")
          echo "FFMPEG=$FFMPEG_PATH"; echo "FFPROBE=$FFPROBE_PATH"
          if [ ! -f "$FFMPEG_PATH" ] || [ ! -f "$FFPROBE_PATH" ]; then
            echo "::error::Không tìm thấy nhị phân ffmpeg/ffprobe"; exit 1
          fi
          chmod +x "$FFMPEG_PATH" "$FFPROBE_PATH"
          echo "FFMPEG_PATH=$FFMPEG_PATH"   >> "$GITHUB_ENV"
          echo "FFPROBE_PATH=$FFPROBE_PATH" >> "$GITHUB_ENV"

      - name: Build .app (embed FFmpeg/FFprobe)
        shell: bash
        run: |
          pyinstaller --noconfirm --clean --windowed \
            --name "$APP_NAME" \
            --add-binary "$FFMPEG_PATH:." \
            --add-binary "$FFPROBE_PATH:." \
            "$ENTRY_SCRIPT"
          ls -la dist

      - name: Create .dmg
        shell: bash
        run: |
          DMG_NAME="${APP_NAME}-arm64.dmg"
          mkdir -p dist_dmg
          cp -R "dist/${APP_NAME}.app" dist_dmg/
          hdiutil create "$DMG_NAME" -volname "$APP_NAME" -srcfolder "dist_dmg" -ov -format UDZO
          rm -rf dist_dmg
          ls -la

      - name: Upload .app
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-mac-app-arm64
          path: dist/${{ env.APP_NAME }}.app

      - name: Upload .dmg
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-mac-dmg-arm64
          path: ${{ env.APP_NAME }}-arm64.dmg
