name: Build VideoCutter (macOS DMG + Windows EXE)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_NAME: VideoCutter
  ENTRY_SCRIPT: app.py        # <<< ĐỔI THÀNH file Python khởi chạy của bạn (vd: video_cutter_gui.py)

jobs:
  # ---------------- macOS Apple Silicon (arm64) ----------------
  mac-arm64:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify entry script exists
        run: |
          echo "ENTRY_SCRIPT=$ENTRY_SCRIPT"
          if [ ! -f "$ENTRY_SCRIPT" ]; then
            echo "::error::ENTRY_SCRIPT not found at $ENTRY_SCRIPT"; exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Node (to fetch ffmpeg/ffprobe)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Fetch ffmpeg + ffprobe static (darwin/arm64)
        run: |
          npm i --silent ffmpeg-static@latest ffprobe-static@latest
          echo "FFMPEG_PATH=$(node -p "require('ffmpeg-static')")" >> $GITHUB_ENV
          echo "FFPROBE_PATH=$(node -p "require('ffprobe-static').path")" >> $GITHUB_ENV

      - name: Make tools executable
        run: |
          chmod +x "$FFMPEG_PATH" "$FFPROBE_PATH"

      - name: Build .app with PyInstaller (embed ffmpeg/ffprobe)
        run: |
          pyinstaller --noconfirm --clean --windowed \
            --name "$APP_NAME" \
            --add-binary "$FFMPEG_PATH:." \
            --add-binary "$FFPROBE_PATH:." \
            "$ENTRY_SCRIPT"
          ls -la dist

      - name: Create .dmg
        run: |
          DMG_NAME="${APP_NAME}-arm64.dmg"
          mkdir -p dist_dmg
          cp -R "dist/${APP_NAME}.app" dist_dmg/
          hdiutil create "$DMG_NAME" -volname "$APP_NAME" -srcfolder "dist_dmg" -ov -format UDZO

      - name: Upload macOS arm64 .dmg
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-mac-dmg-arm64
          path: ${{ env.APP_NAME }}-arm64.dmg

      - name: Upload macOS arm64 .app (optional)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-mac-app-arm64
          path: dist/${{ env.APP_NAME }}.app

  # ---------------- macOS Intel (x86_64) — tùy chọn, bật khi cần ----------------
  mac-x86_64:
    if: ${{ false }}   # đổi thành true để bật job này
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify entry script exists
        run: |
          echo "ENTRY_SCRIPT=$ENTRY_SCRIPT"
          if [ ! -f "$ENTRY_SCRIPT" ]; then
            echo "::error::ENTRY_SCRIPT not found at $ENTRY_SCRIPT"; exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Node (to fetch ffmpeg/ffprobe)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Fetch ffmpeg + ffprobe static (darwin/x64)
        run: |
          npm i --silent ffmpeg-static@latest ffprobe-static@latest
          echo "FFMPEG_PATH=$(node -p "require('ffmpeg-static')")" >> $GITHUB_ENV
          echo "FFPROBE_PATH=$(node -p "require('ffprobe-static').path")" >> $GITHUB_ENV

      - name: Make tools executable
        run: |
          chmod +x "$FFMPEG_PATH" "$FFPROBE_PATH"

      - name: Build .app with PyInstaller (embed ffmpeg/ffprobe)
        run: |
          pyinstaller --noconfirm --clean --windowed \
            --name "$APP_NAME" \
            --add-binary "$FFMPEG_PATH:." \
            --add-binary "$FFPROBE_PATH:." \
            "$ENTRY_SCRIPT"
          ls -la dist

      - name: Create .dmg
        run: |
          DMG_NAME="${APP_NAME}-x86_64.dmg"
          mkdir -p dist_dmg
          cp -R "dist/${APP_NAME}.app" dist_dmg/
          hdiutil create "$DMG_NAME" -volname "$APP_NAME" -srcfolder "dist_dmg" -ov -format UDZO

      - name: Upload macOS x86_64 .dmg
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-mac-dmg-x86_64
          path: ${{ env.APP_NAME }}-x86_64.dmg

  # ---------------- Windows EXE — tùy chọn, bật khi cần ----------------
  win:
    if: ${{ false }}   # đổi thành true để bật job này
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify entry script exists
        shell: pwsh
        run: |
          Write-Host "ENTRY_SCRIPT=$env:ENTRY_SCRIPT"
          if (-not (Test-Path $env:ENTRY_SCRIPT)) {
            Write-Error "ENTRY_SCRIPT not found at $env:ENTRY_SCRIPT"; exit 1
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Node (to fetch ffmpeg/ffprobe)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Fetch ffmpeg + ffprobe static (win)
        shell: pwsh
        run: |
          npm i --silent ffmpeg-static@latest ffprobe-static@latest
          $ffmpeg = node -p "require('ffmpeg-static')"
          $ffprobe = node -p "require('ffprobe-static').path"
          "FFMPEG_PATH=$ffmpeg"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "FFPROBE_PATH=$ffprobe"| Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build EXE with PyInstaller (embed ffmpeg/ffprobe)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --clean --onefile --noconsole `
            --name "$env:APP_NAME" `
            --add-binary "$env:FFMPEG_PATH;." `
            --add-binary "$env:FFPROBE_PATH;." `
            "$env:ENTRY_SCRIPT"
          Get-ChildItem dist

      - name: Upload Windows EXE
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-win-exe
          path: dist/${{ env.APP_NAME }}.exe
